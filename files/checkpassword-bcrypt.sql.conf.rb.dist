#!/bin/env ruby

module CheckpasswordBCrypt
  module Config
    module SQL
      # %s will be replaced by the username
      #
      # this query should return (in this order):
      # username,hash,salt,iterations,uid,quota,lastlogin
      UserQuery = <<-eos
SELECT
  #{DB::Field::Username},
  #{DB::Field::Password},
  #{DB::Field::Uid},
  #{DB::Field::Quota},
  #{DB::Field::Lastlogin},
  #{DB::Field::AuthFailures},
  #{DB::Field::LockedUntil}
FROM
  #{DB::Table}
WHERE
  #{DB::Field::Username} = lower('%s')
LIMIT 1
eos

      # %s will be replaced (in this order) by:  hash algo, hash, username
      #
      # this query should update the user record with the new hash
      UserMigrate = <<-eos
UPDATE
  #{DB::Table}
SET
  #{DB::Field::Password} = '{BCrypt}%s'
WHERE
  #{DB::Field::Username} IN (
    SELECT
      #{DB::Field::Username}
    FROM
      #{DB::Table}
    WHERE
      #{DB::Field::Username} = lower('%s')
    FOR UPDATE
    LIMIT 1
  )
eos

      #this query should update the last login field (if enabled).
      # %s will be replaced by username
      UpdateLastLogin = <<-eos
UPDATE
  #{DB::Table}
SET
  #{DB::Field::Lastlogin}='%s'
WHERE
  #{DB::Field::Username} IN (
    SELECT
      #{DB::Field::Username}
    FROM
      #{DB::Table}
    WHERE
      #{DB::Field::Username} = lower('%s')
    FOR UPDATE
    LIMIT 1
  )
eos

      #this query should update the login failures (if enabled).
      UpdateLoginFailure = <<-eos
UPDATE
  #{DB::Table}
SET
  #{DB::Field::AuthFailures}='%s',
  #{DB::Field::LockedUntil} ='%s'
WHERE
  #{DB::Field::Username} IN (
    SELECT
      #{DB::Field::Username}
    FROM
      #{DB::Table}
    WHERE
      #{DB::Field::Username} = lower('%s')
    FOR UPDATE
    LIMIT 1
  )
eos
    end
  end
end
