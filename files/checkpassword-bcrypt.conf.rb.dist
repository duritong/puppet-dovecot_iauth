#!/bin/env ruby

require 'set'

module Checkpassword
  module Config
    module DB
      Host      = 'db_host'
      Database  = 'db_databse'
      User      = 'db_user'
      Password  = 'db_password'
      Table     = 'db_table'
      module Field
        Username     = "alias||'@'||domain"
        Password     = "password_field"
        Uid          = "uid_field"
        Quota        = "quota_field"
        Lastlogin    = 'lastlogin_field'
        AuthFailures = 'auth_failures'
        LockedUntil  = 'locked_until'
      end
    end
    module Dovecot
      ExtraUserDBFields = {
        'quota_rule' => lambda { |user| user['quota'] },
        'uid'        => lambda { |user| user['uid'] },
        'gid'        => lambda { |user| user['gid'] },
      }
      ExtraPasswordDBFields = {
        'quota_rule' => lambda { |user| user['quota'] },
        'userdb_uid'        => lambda { |user| user['uid'] },
        'userdb_gid'        => lambda { |user| user['gid'] },
      }
    end
    module Mail
      Gid     = '999'
      Home    = '/home/mails/'
    end
    module BCrypt
      Cost    = 10
    end
    Debug             = false
    Migration         = true
    KeepLastLogin     = true
    CheckAuthFailures = true
    AuthFailuresLimit = 8
    LockTime          = 1
    MaxLockTime       = 15
    TrustedIps        = Set.new


    # How the hash should be threated if there is no Algo specified (no {ALGO} prefix in the hash field)
    UnknownHashAlgo = lambda { |user| }

    # This example assumes, that hashes without algo defined are in the CRYPT format
    # UnknownHashAlgo = lambda { |user|
    #                            user['hash_raw']  = user['hash']
    #                            user['hash_algo'] = 'CRYPT' }
  end
end
